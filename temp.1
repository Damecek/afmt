use crate::context::FmtContext;
use crate::{define_struct, define_struct_and_enum};
use tree_sitter::Node;

define_struct_and_enum!(
    "class_declaration" => ClassDeclaration,
    "field_declaration" => FieldDeclaration,
    "method_declaration" => MethodDeclaration,
    "enum_declaration" => EnumDeclaration,
    "enum_constant" => EnumConstant,
    "enum_body" => EnumBody,
    "class_body" => EmptyNode, // FIXME: remove this
    "block" => Block,
    "expression_statement" => Statement | "do_statement",
    "N/A" => DoStatement,
    "while_statement" => WhileStatement,
    "for_statement" => ForStatement,
    "enhanced_for_statement" => EnhancedForStatement,
    "N/operator" => Value | "type_identifier",
    "assignment_operator" => SpaceValueSpace,
    "superclass" => SuperClass,
    "binary_expression" => Expression | "int" | "method_invocation" | "unary_expression" |
        "object_creation_expression" | "array_creation_expression" | "string_literal" | "map_creation_expression" |
        "assignment_expression" | "local_variable_declaration" | "update_expression" | "identifier" |
        "dml_expression" | "boolean",
    "array_access" => ArrayAccess,
    "primary_expression" => PrimaryExpression,
    "N/dml_expression" => DmlExpression,
    "dml_security_mode" => DmlSecurityMode,
    "dml_type" => DmlType,
    "N/assignment_expression" => AssignmentExpression,
    "N/local_variable_declaration" => LocalVariableDeclaration,
    "variable_declarator" => VariableDeclarator,
    "if_statement" => IfStatement,
    "N/update_expression" => UpdateExpression,
    "parenthesized_expression" => ParenthesizedExpression,
    "interfaces" => Interfaces,
    "line_comment" => LineComment,
    "return_statement" => ReturnStatement,
    "argument_list" => ArgumentList,
    "type_arguments" => TypeArguments,
    "generic_type" => GenericType,
    "array_initializer" => ArrayInitializer,
    "dimensions_expr" => DimensionsExpr,
    "array_type" => ArrayType,
    "map_initializer" => MapInitializer,
    "annotation" => Annotation,
    "annotation_argument_list" => AnnotationArgumentList,
    "annotation_key_value" => AnnotationKeyValue,
    "modifiers" => Modifiers,
    "constructor_declaration" => ConstructorDeclaration,
    "constructor_body" => ConstructorBody,
    "explicit_constructor_invocation" => ExplicitConstructorInvocation,
    "run_as_statement" => RunAsStatement,
    "scoped_type_identifier" => ScopedTypeIdentifier,
    "N/object_creation_expression" => ObjectCreationExpression,
    "try_statement" => TryStatement,
    "catch_clause" => CatchClause,
    "catch_formal_parameter" => CatchFormalParameter,
    "finally_clause" => FinallyClause,
    "field_access" => FieldAccess,
    "instanceof_expression" => InstanceOfExpression,
    "cast_expression" => CastExpression,
    "N/boolean" => Boolean,
    "ternary_expression" => TernaryExpression,
    "N/method_invocation" => MethodInvocation,
    "accessor_list" => AccessorList,
    "accessor_declartion" => AccessorDeclaration,
    "query_expression" => QueryExpression,
    "soql_query" => SoqlQuery,
    "soql_query_body" => SoqlQueryBody,
    "sosl_query" => SoslQuery,
    "binary_expression" => BinaryExpression,
    "unary_expression" => UnaryExpression,
    "array_creation_expression" => ArrayCreationExpression,
    "map_creation_expression" => MapCreationExpression

);
