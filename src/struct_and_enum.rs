use crate::context::FmtContext;
use crate::{define_struct, define_struct_and_enum};
use tree_sitter::Node;

define_struct_and_enum!(
    ClassDeclaration => "class_declaration",
    FieldDeclaration => "field_declaration",
    MethodDeclaration => "method_declaration",
    EnumDeclaration => "enum_declaration",
    EnumConstant => "enum_constant",
    EnumBody => "enum_body",
    EmptyNode => "class_body", // FIXME: remove this
    Block => "block",
    Statement => "expression_statement" | "do_statement",
    DoStatement => "N/A",
    WhileStatement => "while_statement",
    ForStatement => "for_statement",
    EnhancedForStatement => "enhanced_for_statement",
    Value =>   "N/operator" | "type_identifier",
    SpaceValueSpace => "assignment_operator",
    SuperClass => "superclass",
    Expression => "binary_expression" | "int" | "method_invocation" | "unary_expression" |
        "object_creation_expression" | "array_creation_expression" | "string_literal" | "map_creation_expression" |
        "assignment_expression" | "local_variable_declaration" | "update_expression" | "identifier" |
        "dml_expression" | "boolean",
    ArrayAccess => "array_access",
    PrimaryExpression => "primary_expression",
    DmlExpression => "N/dml_expression",
    DmlSecurityMode => "dml_security_mode",
    DmlType => "dml_type",
    AssignmentExpression => "N/assignment_expression",
    LocalVariableDeclaration => "N/local_variable_declaration",
    VariableDeclarator => "variable_declarator",
    IfStatement => "if_statement",
    UpdateExpression => "N/update_expression",
    ParenthesizedExpression => "parenthesized_expression",
    Interfaces => "interfaces",
    LineComment => "line_comment",
    ReturnStatement => "return_statement",
    ArgumentList => "argument_list",
    TypeArguments => "type_arguments",
    GenericType => "generic_type",
    ArrayInitializer => "array_initializer",
    DimensionsExpr => "dimensions_expr",
    ArrayType => "array_type",
    MapInitializer => "map_initializer",
    Annotation => "annotation",
    AnnotationArgumentList => "annotation_argument_list",
    AnnotationKeyValue => "annotation_key_value",
    Modifiers => "modifiers",
    ConstructorDeclaration => "constructor_declaration",
    ConstructorBody => "constructor_body",
    ExplicitConstructorInvocation => "explicit_constructor_invocation",
    RunAsStatement => "run_as_statement",
    ScopedTypeIdentifier => "scoped_type_identifier",
    ObjectCreationExpression => "N/object_creation_expression",
    TryStatement => "try_statement",
    CatchClause => "catch_clause",
    CatchFormalParameter => "catch_formal_parameter",
    FinallyClause => "finally_clause",
    FieldAccess => "field_access",
    InstanceOfExpression => "instanceof_expression",
    CastExpression => "cast_expression",
    Boolean => "N/boolean",
    TernaryExpression => "ternary_expression",
    MethodInvocation => "N/method_invocation",
    AccessorList => "accessor_list",
    AccessorDeclaration => "accessor_declartion",
    QueryExpression => "query_expression",
    SoqlQuery => "soql_query",
    SoqlQueryBody => "soql_query_body",
    SoslQuery => "sosl_query",
    BinaryExpression => "binary_expression",
    UnaryExpression => "unary_expression",
    ArrayCreationExpression => "array_creation_expression",
    MapCreationExpression => "map_creation_expression"

);
